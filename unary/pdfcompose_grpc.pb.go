// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pdfcompose

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PdfComposeClient is the client API for PdfCompose service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdfComposeClient interface {
	ComposeFromFiles(ctx context.Context, in *ComposeFromFilesRequest, opts ...grpc.CallOption) (*ComposeFromFilesResponse, error)
}

type pdfComposeClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfComposeClient(cc grpc.ClientConnInterface) PdfComposeClient {
	return &pdfComposeClient{cc}
}

func (c *pdfComposeClient) ComposeFromFiles(ctx context.Context, in *ComposeFromFilesRequest, opts ...grpc.CallOption) (*ComposeFromFilesResponse, error) {
	out := new(ComposeFromFilesResponse)
	err := c.cc.Invoke(ctx, "/pdfcompose.PdfCompose/ComposeFromFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PdfComposeServer is the server API for PdfCompose service.
// All implementations must embed UnimplementedPdfComposeServer
// for forward compatibility
type PdfComposeServer interface {
	ComposeFromFiles(context.Context, *ComposeFromFilesRequest) (*ComposeFromFilesResponse, error)
	mustEmbedUnimplementedPdfComposeServer()
}

// UnimplementedPdfComposeServer must be embedded to have forward compatible implementations.
type UnimplementedPdfComposeServer struct {
}

func (UnimplementedPdfComposeServer) ComposeFromFiles(context.Context, *ComposeFromFilesRequest) (*ComposeFromFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ComposeFromFiles not implemented")
}
func (UnimplementedPdfComposeServer) mustEmbedUnimplementedPdfComposeServer() {}

// UnsafePdfComposeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfComposeServer will
// result in compilation errors.
type UnsafePdfComposeServer interface {
	mustEmbedUnimplementedPdfComposeServer()
}

func RegisterPdfComposeServer(s *grpc.Server, srv PdfComposeServer) {
	s.RegisterService(&_PdfCompose_serviceDesc, srv)
}

func _PdfCompose_ComposeFromFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComposeFromFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PdfComposeServer).ComposeFromFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pdfcompose.PdfCompose/ComposeFromFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PdfComposeServer).ComposeFromFiles(ctx, req.(*ComposeFromFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PdfCompose_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pdfcompose.PdfCompose",
	HandlerType: (*PdfComposeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ComposeFromFiles",
			Handler:    _PdfCompose_ComposeFromFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unary/pdfcompose.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pdfcompose

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PdfComposeClient is the client API for PdfCompose service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PdfComposeClient interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (PdfCompose_UploadFileClient, error)
}

type pdfComposeClient struct {
	cc grpc.ClientConnInterface
}

func NewPdfComposeClient(cc grpc.ClientConnInterface) PdfComposeClient {
	return &pdfComposeClient{cc}
}

func (c *pdfComposeClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (PdfCompose_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PdfCompose_serviceDesc.Streams[0], "/pdfcompose.PdfCompose/UploadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &pdfComposeUploadFileClient{stream}
	return x, nil
}

type PdfCompose_UploadFileClient interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type pdfComposeUploadFileClient struct {
	grpc.ClientStream
}

func (x *pdfComposeUploadFileClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pdfComposeUploadFileClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PdfComposeServer is the server API for PdfCompose service.
// All implementations must embed UnimplementedPdfComposeServer
// for forward compatibility
type PdfComposeServer interface {
	UploadFile(PdfCompose_UploadFileServer) error
	mustEmbedUnimplementedPdfComposeServer()
}

// UnimplementedPdfComposeServer must be embedded to have forward compatible implementations.
type UnimplementedPdfComposeServer struct {
}

func (UnimplementedPdfComposeServer) UploadFile(PdfCompose_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedPdfComposeServer) mustEmbedUnimplementedPdfComposeServer() {}

// UnsafePdfComposeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PdfComposeServer will
// result in compilation errors.
type UnsafePdfComposeServer interface {
	mustEmbedUnimplementedPdfComposeServer()
}

func RegisterPdfComposeServer(s *grpc.Server, srv PdfComposeServer) {
	s.RegisterService(&_PdfCompose_serviceDesc, srv)
}

func _PdfCompose_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PdfComposeServer).UploadFile(&pdfComposeUploadFileServer{stream})
}

type PdfCompose_UploadFileServer interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type pdfComposeUploadFileServer struct {
	grpc.ServerStream
}

func (x *pdfComposeUploadFileServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pdfComposeUploadFileServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PdfCompose_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pdfcompose.PdfCompose",
	HandlerType: (*PdfComposeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _PdfCompose_UploadFile_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream/pdfcompose.proto",
}
